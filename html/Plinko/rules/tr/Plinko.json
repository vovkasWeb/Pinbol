{"content":"<div id=\"rules\">\n<h1 id=\"plinko-kurallar\">Plinko kuralları</h1>\n\n<h2 id=\"tantm\">Tanıtım</h2>\n\n<p>Plinko, 20. yüzyıl televizyon programlarında çok popüler olan, çıkıntılı sıralı mandallarla doldurulmuş bir dikey tahtadan aşağıya doğru “düşen” bir top ile oynanan kendine has bir şans oyunudur.  BGaming, tahtayı bir piramit şeklinde temsil etti. Oynanış oldukça basittir: oyuncu, topun en iyi ödemesi olan deliklerden birine düşeceğini umarak 8 ile 16 sıraları arasından seçim yapar ve sadece piramidin tepesinden topu bırakarak “engellerin içinden tahtanın en altına düşüş sürecini” izler. Top en sonunda alt mandala düşer ve ödülü belirler. O halde Plinko’nun karmaşık sistemine hoş geldiniz, şansınıza güvenin ve topun düşmesine izin verin!</p>\n\n<h2 id=\"kurallar\">Kurallar</h2>\n\n<p>Amaç, Plinko topunu düşürerek para kazanmak ve tahtanın altındaki en yüksek para yuvasına düşene kadar beklemektir.</p>\n\n<h2 id=\"oyun\">Oyun</h2>\n\n<p>Oyun miktarını seçin. <strong>“-”</strong>, <strong>“+”</strong>, <strong>“Min”</strong>, <strong>“Maks”</strong> düğmeleri kullanılabilir. Maksimum miktara ulaşıldığında, <strong>“+”</strong> ve <strong>“Maks”</strong> düğmeleri devre dışı kalır. Minimum miktara ulaşıldığında, <strong>“-”</strong> ve <strong>“Min”</strong> düğmeleri devre dışı kalır. Risk Seviyesini seçin: Düşük, Normal veya Yüksek. Oyundaki Sıra sayısını seçin: 8’den 16’ya kadar. Oyun Modunu seçin: Manuel veya Otomatik.</p>\n\n<p>Oyun turunu başlatmak için <strong>Oyna</strong> düğmesine basın. <strong>Oyun Modu</strong> hariç tüm oyun düğmeleri tur sırasında devre dışı kalır. Tur sırasında, <strong>Oyna</strong> düğmesini kullanarak aynı ayarlara sahip başka bir tur başlatılabilir. Her turun sonunda top yuvaya ulaşır. Her yuvada görüntülenen sayılar çarpan değerlerini temsil eder. Topun düştüğü cebin çarpanı oyuncunun oyun miktarına uygulanır. Nihai ödeme, oyuncunun oyun miktarının geçerli tüm çarpan değerleriyle çarpılmasıyla hesaplanır.</p>\n\n<p><strong>Otomatik Mod</strong> etkinken, otomatik oyunların sayısı gösterilir. <strong>Oyun sayısını</strong> seçin. <strong>Oyna</strong> düğmesine basın. <strong>Oyna</strong> düğmesi, kalan oyun sayısına göre <strong>Dur</strong> olarak değişir. Yeterli bakiye yokken belirlenen tur sayısına ulaşılırsa <strong>Dur</strong> düğmesine tıklayarak tur serisi sonlandırılabilir.</p>\n\n<p><span class=\"min_max_bet\">Minimum oyun miktarı {min_bet} olarak belirlenmiştir. Maksimum oyun miktarı {max_bet} olarak belirlenmiştir.</span></p>\n\n<h2 id=\"sonular\">Sonuçlar</h2>\n\n<p>Kazanç hesaplaması ödeme tablosuna göre yapılır. Sonuç, bakiye alanına eklenir. Ödemelerin miktarı düşükten yükseğe değişiklik gösterir.</p>\n\n<div class=\"license-block-casual casual_custom_license\">\n\n  <h2 id=\"lisans-gereklilikleri\">Lisans gereklilikleri</h2>\n\n  <p><span class=\"__OPTIONS__-license_rules-license netherlands\">\nOperatörün çalışmasını düzenleyen lisansın gereklilikleri nedeniyle oyunda Otomatik Mod kullanılamayabilir.\n</span></p>\n\n  <p><span class=\"__OPTIONS__-license_rules-license netherlands\">\nOperatörün çalışmasını düzenleyen lisansın gereklilikleri nedeniyle oyunda hızlı spin kullanılamayabilir.\n</span></p>\n\n  <p><span class=\"casual_custom_license\"> Operatörün çalışmasını düzenleyen lisansın gereklilikleri nedeniyle, mevcut tur sırasında “Oynat” düğmesini kullanarak aynı ayarlarla başka bir tur başlatma olanağı oyunda mevcut olmayabilir. Bu durumda, “Oynat” düğmesi mevcut tur tamamlanana ve sonuçlar görüntülenene kadar pasif kalacaktır. Aynı anda sadece bir tur oynanabilir.</span></p>\n\n</div>\n\n<h2 id=\"oyuncuya-dn\">Oyuncuya Dönüş</h2>\n\n<p>Oyuncunun seçtiği stratejiye bağlı olarak genel kuramsal Oyuncuya Dönüş Oranı (RTP) %{RTP.min_rtp} - %{RTP.max_rtp} olarak hesaplanmıştır.</p>\n\n<p>Arıza gerçekleşmesi durumunda tüm oyunlar geçersiz ve kazanılmış sayılır! Yarım kalan tüm turlar, 24 saat sonra sonlandırılır. Oyunda “Alma” işlemi zorunluysa “Alma” işlemi gerçekleştirilir ve turdaki kazanç, oyuncu bakiyesine eklenir. Oyuncu katılımının gerektiği durumlarda oyuncunun ilk oyunu artırmadan risksiz bir seçim yaptığı varsayılır ve sonucun geçerliliği kabul edilir.</p>\n\n<p><span class=\"game_version\">Oyun Sürümü {game_version}.</span></p>\n\n<p>Bu web sitesinde yayınlanan Oyun Kuralları İngilizcedir. Diğer dillere yapılan çeviriler iyi niyetimizin bir göstergesi olarak sunulmaktadır. İngilizce versiyon ve çeviri arasında bir tutarsızlık olması durumunda İngilizce orijinali her zaman önceliklidir.</p>\n</div>\n","contentUpdateScript":"const casinoOptions = window.__OPTIONS__;\nlet customRulesStyle = '';\n\nif (casinoOptions?.math?.gamble_limit) {\n    content = content.replaceAll('{GAMBLE_LIMIT}', casinoOptions.math.gamble_limit);\n}\n\n//INFO: temporary solution for BGG-7896 & BGG-11170, but we need more flexible solution\nconst licenseDisabled = [\"empty\", \"switzerland\"];\nconst rulesLicense = casinoOptions?.license_rules?.license ?? \"empty\";\nif (licenseDisabled.includes(rulesLicense)) {\n    customRulesStyle += ` .license-block { display: none } `;\n}\n\nif (rulesLicense === \"empty\") {\n\tcustomRulesStyle += ` .license-block-casual { display: none } `;\n}\n\n// BGG-11165: Allow custom rules for any license\ncustomRulesStyle += ` .__OPTIONS__-license_rules-license { display: none } `;\ncustomRulesStyle += ` .__OPTIONS__-license_rules-license.${rulesLicense} { display: unset } `;\n\nif (casinoOptions?.ui?.show_rtp_in_rules === false) {\n    const rtpRegExp = /<h\\d[^>]*>[^>]*<\\/h\\d>[^<]*<p>[^<]*(\\{RTP.+\\}|\\d[^<]*%)[^<]*<\\/p>[^<]*/;\n\n    content = content.replace(rtpRegExp, '');\n}\n\nif (casinoOptions?.math?.rtp) {\n    if (!isNaN(casinoOptions.math.rtp)) {\n        casinoOptions.math.rtp = { main: casinoOptions.math.rtp };\n    }\n\n    content = content.replaceAll(`{RTP_VALUE}`, `{RTP.main}`);\n    Object.keys(casinoOptions.math.rtp).forEach((key) => {\n        content = content.replaceAll(`{RTP.${key}}`, casinoOptions.math.rtp[key]);\n    });\n}\n\nif (casinoOptions?.custom?.paytableFormatted) {\n    Object.keys(casinoOptions.custom.paytableFormatted).forEach((key) => {\n        content = content.replaceAll(`{PAYTABLE.${key}}`, casinoOptions.custom.paytableFormatted[key]);\n    });\n}\n\nif (casinoOptions?.custom?.wintableFormatted) {\n\tObject.keys(casinoOptions.custom.wintableFormatted).forEach((key) => {\n\t\tcontent = content.replaceAll(`{WIN.${key}}`, casinoOptions.custom.wintableFormatted[key]);\n\t});\n}\n\nif (casinoOptions?.custom?.maxWinsFormatted) {\n    casinoOptions.custom.maxWinsFormatted.forEach((winFormatted, index) => {\n        content = content.replaceAll(`{MAX_WIN.${index}}`, winFormatted);\n    });\n}\n\nif (casinoOptions?.custom?.betFormatted) {\n    content = content.replaceAll(`{BET_FORMATTED}`, casinoOptions.custom.betFormatted);\n}\n\nif (customRulesStyle !== '') {\n    content = '<style>' + customRulesStyle + '</style>' + content;\n}\n\nreturn content;\n\n","domScripts":["(()=>{\nconst casinoOptions = window.__OPTIONS__;\n\nfunction formatBet(bet, subunits, exponent = 0) {\n    const betValue = bet / subunits;\n    let ret;\n\n    if (exponent > 0) {\n        let str = betValue.toFixed(exponent).split('.');\n        if (str[0].length > 3) {\n            str[0] = str[0].replace(/(.)(?=(.{3})+$)/g, '$1 ');\n        }\n        ret = str.join('.');\n    } else {\n        ret = betValue.toFixed(0).replace(/(.)(?=(.{3})+$)/g, '$1 ');\n    }\n    return ret;\n}\n\nfunction setMinMaxBets(options) {\n    const { rules, license_rules } = options;\n    const { min_bet, max_bet, currency } = rules || {};\n    const { symbol, exponent, subunits } = currency || {};\n\n    const isNeedToRemoveMinMaxBetBlock =\n        license_rules?.license !== 'switzerland' && license_rules?.license !== 'danish' && license_rules?.license !== 'swedish';\n    document.querySelectorAll('.min_max_bet').forEach((fragment) => {\n        if (isNeedToRemoveMinMaxBetBlock || (!min_bet && !max_bet)) {\n            fragment.remove();\n        } else {\n            const currencySymbol = symbol || '';\n            const minBet = formatBet(min_bet, subunits, exponent);\n            const maxBet = formatBet(max_bet, subunits, exponent);\n            fragment.textContent = fragment.textContent.replace('{min_bet}', `${minBet} ${currencySymbol}`);\n            fragment.textContent = fragment.textContent.replace('{max_bet}', `${maxBet} ${currencySymbol}`);\n        }\n    });\n}\n\nsetMinMaxBets(casinoOptions);\n\n})()\n","(()=>{\nconst casinoOptions = window.__OPTIONS__;\nconst customLicenses = ['netherlands', 'swedish', 'italian', 'switzerland'];\n\nfunction handleCustomLicenses(options, customLicenses) {\n\tdocument.querySelectorAll('.casual_custom_license').forEach((fragment) => {\n\t\tif (!customLicenses.includes(options?.license_rules?.license)) {\n\t\t\tfragment.remove();\n\t\t}\n\t});\n}\n\nhandleCustomLicenses(casinoOptions, customLicenses);\n\n})()\n","(()=>{\nconst casinoOptions = window.__OPTIONS__;\n\nfunction handleGameVersion(options) {\n    const gameVersion = options?.version;\n\n    document.querySelectorAll('.game_version').forEach((fragment) => {\n        if (!gameVersion) {\n            fragment.remove();\n        } else {\n            fragment.textContent = fragment.textContent.replaceAll('{game_version}', `${gameVersion}`);\n        }\n    });\n}\n\nhandleGameVersion(casinoOptions);\n\n})()\n","(()=>{\nconst PURCHASE_KEYS_REGEX = /buy|chance/;\nconst NETHERLANDS_RTP_TO_RENDER = /(main|chance)/;\n\nfunction getFinalRtpValues(options, isNeedRemovePurchasesRtp) {\n    const rtp = options?.math?.rtp ?? null;\n\n    if (!rtp || !isNeedRemovePurchasesRtp) return rtp;\n\n    return Object.entries(rtp).reduce((result, [rtpName, rtpValue]) => {\n        if (!PURCHASE_KEYS_REGEX.test(rtpName)) {\n            result[rtpName] = rtpValue;\n        }\n        return result;\n    }, {});\n}\n\nfunction removeBonusRtpFromRules(rtp, isNeedRemovePurchasesRtp) {\n    document.querySelectorAll('[class*=\"rtp\"]').forEach((fragment) => {\n        const rtpName = fragment.className.replace('rtp-', '');\n        const isNeedRemoveStaticRtp = isNeedRemovePurchasesRtp && PURCHASE_KEYS_REGEX.test(rtpName);\n        const isNeedRemoveDynamicRtp = rtp && !rtp[rtpName];\n\n        if (isNeedRemoveDynamicRtp || isNeedRemoveStaticRtp) {\n            fragment.parentElement.removeChild(fragment);\n        }\n    });\n}\n\nfunction removeAllBonusRtpExeptChance(rtp, isNeedRemoveRtp) {\n    document.querySelectorAll('[class*=\"rtp\"]').forEach((fragment) => {\n        const rtpName = fragment.className.replace('rtp-', '');\n        const isNeedRemoveStaticRtp = isNeedRemoveRtp && !NETHERLANDS_RTP_TO_RENDER.test(rtpName);\n        const isNeedRemoveDynamicRtp = rtp && !rtp[rtpName];\n\n        if (isNeedRemoveDynamicRtp || isNeedRemoveStaticRtp) {\n            fragment.parentElement.removeChild(fragment);\n        }\n    });\n}\n\nfunction replaceContent() {\n    const casinoOptions = window.__OPTIONS__;\n\n    const rulesLicense = casinoOptions?.license_rules?.license ?? 'empty';\n    const isNeedRemovePurchasesRtp = rulesLicense === 'greek';\n    const isNeedRemovePurchasesRtpForNetherlands = rulesLicense === 'netherlands';\n    const isNeedRemovePurchasesRtpForPortuguese = rulesLicense === 'portuguese';\n    const isNeedRemoveRtp = isNeedRemovePurchasesRtpForNetherlands || isNeedRemovePurchasesRtpForPortuguese;\n\n    const rtp = getFinalRtpValues(casinoOptions, isNeedRemovePurchasesRtp);\n    removeBonusRtpFromRules(rtp, isNeedRemovePurchasesRtp);\n    removeAllBonusRtpExeptChance(rtp, isNeedRemoveRtp);\n}\n\nreplaceContent();\n\n})()\n"]}