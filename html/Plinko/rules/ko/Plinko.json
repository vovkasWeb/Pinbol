{"content":"<div id=\"rules\">\n<h1 id=\"plinko-\">Plinko 규칙</h1>\n\n<h2 id=\"section\">소개</h2>\n\n<p>플링코는 독특한 확률 게임으로, 핀이 줄줄이 박힌 수직 보드에서 공이 “플링킹”하며 아래로 떨어집니다. 20세기 TV 쇼에서 많이 볼 수 있는 인기 게임입니다.  BGaming은 피라미드 형태로 보드를 표현했습니다. 게임 플레이는 매우 간단합니다. 플레이어는 행 개수를 8줄에서 16줄 사이에서 선택하고, 공이 배율이 가장 좋은 구멍으로 떨어지기를 바라면서, 피라미드의 꼭대기에서 보드 밑바닥까지 “공이 장애물 사이를 통통 튀며 통과하는 것”을 지켜봅니다. 공은 결국 맨 아래의 핀에 도달하여 상금을 결정합니다. 자, 플링코의 재미있는 시스템에 오신 것을 환영합니다. 행운을 믿고 공을 떨어뜨려 보세요!</p>\n\n<h2 id=\"section-1\">규칙</h2>\n\n<p>게임의 목표는 플링코 공을 떨어뜨리고 공이 보드 하단의 가장 상금이 높은 칸에 들어가기를 기다려 상금을 획득하는 것입니다.</p>\n\n<h2 id=\"section-2\">베팅</h2>\n\n<p>베팅 금액을 선택하세요. <strong>“-”</strong>, <strong>“+”</strong>, <strong>“최소”</strong>, <strong>“최대”</strong> 버튼을 사용할 수 있습니다. 최대 금액에 도달하면 <strong>“+”</strong>와 <strong>“최대”</strong> 버튼이 비활성화됩니다. 최소 금액에 도달하면 <strong>“-”</strong>와 <strong>“최소”</strong> 버튼이 비활성화됩니다. 리스크 수준을 낮음, 보통, 높음 중에서 선택하세요. 게임 내 라인의 수를 8~16 중에서 선택하세요. 베팅 모드를 수동 또는 자동으로 선택하세요.</p>\n\n<p>게임 라운드를 시작하려면 <strong>플레이</strong> 버튼을 누르세요. 라운드가 시작되면 <strong>베팅 모드</strong>를 제외한 모든 베팅 버튼이 비활성화됩니다. 라운드 중에 <strong>플레이</strong> 버튼을 사용하여 동일한 설정으로 다른 라운드를 시작할 수 있습니다. 각 라운드가 끝나면 공이 포켓에 도달합니다. 각 포켓에 표시된 숫자는 멀티플라이어 값을 나타냅니다. 공이 들어간 포켓의 멀티플라이어가 플레이어의 베팅에 적용됩니다. 최종 페이아웃은 플레이어의 베팅과 모든 해당되는 멀티플라이어 값을 곱하여 계산합니다.</p>\n\n<p><strong>자동 모드</strong>에서는 자동 베팅 횟수를 설정하는 필드가 표시됩니다. <strong>베팅 횟수</strong>를 선택하세요. <strong>플레이</strong> 버튼을 누르세요. <strong>플레이</strong> 버튼은 <strong>중지</strong>버튼으로 변경되며, 남은 자동 횟수가 아래에 표시됩니다. 설정한 라운드 횟수에 도달하거나, <strong>중지</strong> 버튼을 클릭하거나, 잔액이 충분하지 않을 경우 연속 라운드가 종료됩니다.</p>\n\n<p><span class=\"min_max_bet\">최소 베팅 금액은 {min_bet}입니다. 최대 베팅 금액은 {max_bet}입니다</span></p>\n\n<h2 id=\"section-3\">결과</h2>\n\n<p>상금은 페이테이블에 따라 계산됩니다. 결과는 잔액 필드에 추가됩니다. 상금의 사이즈는 로우에서 하이까지 다양합니다.</p>\n\n<div class=\"license-block-casual casual_custom_license\">\n\n  <h2 id=\"section-4\">라이선스 요구사항</h2>\n\n  <p><span class=\"__OPTIONS__-license_rules-license netherlands\">\n운영자의 작업을 규제하는 라이선스 요구사항으로 인해 게임에서 자동 모드를 사용하지 못할 수 있습니다.\n</span></p>\n\n  <p><span class=\"__OPTIONS__-license_rules-license netherlands\">\n운영자의 작업을 규제하는 라이선스 요구사항으로 인해 게임에서 빠른 스핀을 사용하지 못할 수 있습니다.\n</span></p>\n\n  <p><span class=\"casual_custom_license\"> 현재 라운드에서 ‘플레이’ 버튼을 사용하여 동일한 설정으로 다음 라운드를 시작하는 기능은 운영자의 작업을 규제하는 라이선스 요구사항으로 인해 게임에서 사용하지 못할 수 있습니다. 이 경우, ‘플레이’ 버튼은 현재 라운드가 완료되고 결과가 표시될 때까지 비활성 상태로 유지됩니다. 한 번에 하나의 라운드만 플레이할 수 있습니다.</span></p>\n\n</div>\n\n<h2 id=\"section-5\">플레이어 환수율</h2>\n\n<p>전체적인 이론적 플레이어 환수율(RTP)은 {RTP.min_rtp}% - {RTP.max_rtp}%이며, 플레이어가 선택한 전략에 따라 달라집니다.</p>\n\n<p>오작동 발생 시 모든 플레이와 지급이 무효가 됩니다! 완료되지 않은 모든 라운드는 24시간마다 종료됩니다. 게임에 “수령”이 필요한 경우 - “수령”이 이루어지며 해당 라운드의 상금이 플레이어 잔액에 추가됩니다. 게임에 플레이어의 행동이 필요한 경우, 플레이어가 초기 베팅을 올리지 않고 위험 부담이 없는 행동을 선택했다는 가정하에 결과가 계산됩니다.</p>\n\n<p><span class=\"game_version\">게임 버전 {game_version}.</span></p>\n\n<p>본 웹사이트에 게시된 게임 규칙은 영어로 되어 있습니다. 다른 언어로의 번역은 선의의 서비스 차원에서 제공됩니다. 영어 버전과 번역본 사이에 모호한 부분이 있는 경우, 항상 영어 버전이 우선합니다.</p>\n</div>\n","contentUpdateScript":"const casinoOptions = window.__OPTIONS__;\nlet customRulesStyle = '';\n\nif (casinoOptions?.math?.gamble_limit) {\n    content = content.replaceAll('{GAMBLE_LIMIT}', casinoOptions.math.gamble_limit);\n}\n\n//INFO: temporary solution for BGG-7896 & BGG-11170, but we need more flexible solution\nconst licenseDisabled = [\"empty\", \"switzerland\"];\nconst rulesLicense = casinoOptions?.license_rules?.license ?? \"empty\";\nif (licenseDisabled.includes(rulesLicense)) {\n    customRulesStyle += ` .license-block { display: none } `;\n}\n\nif (rulesLicense === \"empty\") {\n\tcustomRulesStyle += ` .license-block-casual { display: none } `;\n}\n\n// BGG-11165: Allow custom rules for any license\ncustomRulesStyle += ` .__OPTIONS__-license_rules-license { display: none } `;\ncustomRulesStyle += ` .__OPTIONS__-license_rules-license.${rulesLicense} { display: unset } `;\n\nif (casinoOptions?.ui?.show_rtp_in_rules === false) {\n    const rtpRegExp = /<h\\d[^>]*>[^>]*<\\/h\\d>[^<]*<p>[^<]*(\\{RTP.+\\}|\\d[^<]*%)[^<]*<\\/p>[^<]*/;\n\n    content = content.replace(rtpRegExp, '');\n}\n\nif (casinoOptions?.math?.rtp) {\n    if (!isNaN(casinoOptions.math.rtp)) {\n        casinoOptions.math.rtp = { main: casinoOptions.math.rtp };\n    }\n\n    content = content.replaceAll(`{RTP_VALUE}`, `{RTP.main}`);\n    Object.keys(casinoOptions.math.rtp).forEach((key) => {\n        content = content.replaceAll(`{RTP.${key}}`, casinoOptions.math.rtp[key]);\n    });\n}\n\nif (casinoOptions?.custom?.paytableFormatted) {\n    Object.keys(casinoOptions.custom.paytableFormatted).forEach((key) => {\n        content = content.replaceAll(`{PAYTABLE.${key}}`, casinoOptions.custom.paytableFormatted[key]);\n    });\n}\n\nif (casinoOptions?.custom?.wintableFormatted) {\n\tObject.keys(casinoOptions.custom.wintableFormatted).forEach((key) => {\n\t\tcontent = content.replaceAll(`{WIN.${key}}`, casinoOptions.custom.wintableFormatted[key]);\n\t});\n}\n\nif (casinoOptions?.custom?.maxWinsFormatted) {\n    casinoOptions.custom.maxWinsFormatted.forEach((winFormatted, index) => {\n        content = content.replaceAll(`{MAX_WIN.${index}}`, winFormatted);\n    });\n}\n\nif (casinoOptions?.custom?.betFormatted) {\n    content = content.replaceAll(`{BET_FORMATTED}`, casinoOptions.custom.betFormatted);\n}\n\nif (customRulesStyle !== '') {\n    content = '<style>' + customRulesStyle + '</style>' + content;\n}\n\nreturn content;\n\n","domScripts":["(()=>{\nconst casinoOptions = window.__OPTIONS__;\n\nfunction formatBet(bet, subunits, exponent = 0) {\n    const betValue = bet / subunits;\n    let ret;\n\n    if (exponent > 0) {\n        let str = betValue.toFixed(exponent).split('.');\n        if (str[0].length > 3) {\n            str[0] = str[0].replace(/(.)(?=(.{3})+$)/g, '$1 ');\n        }\n        ret = str.join('.');\n    } else {\n        ret = betValue.toFixed(0).replace(/(.)(?=(.{3})+$)/g, '$1 ');\n    }\n    return ret;\n}\n\nfunction setMinMaxBets(options) {\n    const { rules, license_rules } = options;\n    const { min_bet, max_bet, currency } = rules || {};\n    const { symbol, exponent, subunits } = currency || {};\n\n    const isNeedToRemoveMinMaxBetBlock =\n        license_rules?.license !== 'switzerland' && license_rules?.license !== 'danish' && license_rules?.license !== 'swedish';\n    document.querySelectorAll('.min_max_bet').forEach((fragment) => {\n        if (isNeedToRemoveMinMaxBetBlock || (!min_bet && !max_bet)) {\n            fragment.remove();\n        } else {\n            const currencySymbol = symbol || '';\n            const minBet = formatBet(min_bet, subunits, exponent);\n            const maxBet = formatBet(max_bet, subunits, exponent);\n            fragment.textContent = fragment.textContent.replace('{min_bet}', `${minBet} ${currencySymbol}`);\n            fragment.textContent = fragment.textContent.replace('{max_bet}', `${maxBet} ${currencySymbol}`);\n        }\n    });\n}\n\nsetMinMaxBets(casinoOptions);\n\n})()\n","(()=>{\nconst casinoOptions = window.__OPTIONS__;\nconst customLicenses = ['netherlands', 'swedish', 'italian', 'switzerland'];\n\nfunction handleCustomLicenses(options, customLicenses) {\n\tdocument.querySelectorAll('.casual_custom_license').forEach((fragment) => {\n\t\tif (!customLicenses.includes(options?.license_rules?.license)) {\n\t\t\tfragment.remove();\n\t\t}\n\t});\n}\n\nhandleCustomLicenses(casinoOptions, customLicenses);\n\n})()\n","(()=>{\nconst casinoOptions = window.__OPTIONS__;\n\nfunction handleGameVersion(options) {\n    const gameVersion = options?.version;\n\n    document.querySelectorAll('.game_version').forEach((fragment) => {\n        if (!gameVersion) {\n            fragment.remove();\n        } else {\n            fragment.textContent = fragment.textContent.replaceAll('{game_version}', `${gameVersion}`);\n        }\n    });\n}\n\nhandleGameVersion(casinoOptions);\n\n})()\n","(()=>{\nconst PURCHASE_KEYS_REGEX = /buy|chance/;\nconst NETHERLANDS_RTP_TO_RENDER = /(main|chance)/;\n\nfunction getFinalRtpValues(options, isNeedRemovePurchasesRtp) {\n    const rtp = options?.math?.rtp ?? null;\n\n    if (!rtp || !isNeedRemovePurchasesRtp) return rtp;\n\n    return Object.entries(rtp).reduce((result, [rtpName, rtpValue]) => {\n        if (!PURCHASE_KEYS_REGEX.test(rtpName)) {\n            result[rtpName] = rtpValue;\n        }\n        return result;\n    }, {});\n}\n\nfunction removeBonusRtpFromRules(rtp, isNeedRemovePurchasesRtp) {\n    document.querySelectorAll('[class*=\"rtp\"]').forEach((fragment) => {\n        const rtpName = fragment.className.replace('rtp-', '');\n        const isNeedRemoveStaticRtp = isNeedRemovePurchasesRtp && PURCHASE_KEYS_REGEX.test(rtpName);\n        const isNeedRemoveDynamicRtp = rtp && !rtp[rtpName];\n\n        if (isNeedRemoveDynamicRtp || isNeedRemoveStaticRtp) {\n            fragment.parentElement.removeChild(fragment);\n        }\n    });\n}\n\nfunction removeAllBonusRtpExeptChance(rtp, isNeedRemoveRtp) {\n    document.querySelectorAll('[class*=\"rtp\"]').forEach((fragment) => {\n        const rtpName = fragment.className.replace('rtp-', '');\n        const isNeedRemoveStaticRtp = isNeedRemoveRtp && !NETHERLANDS_RTP_TO_RENDER.test(rtpName);\n        const isNeedRemoveDynamicRtp = rtp && !rtp[rtpName];\n\n        if (isNeedRemoveDynamicRtp || isNeedRemoveStaticRtp) {\n            fragment.parentElement.removeChild(fragment);\n        }\n    });\n}\n\nfunction replaceContent() {\n    const casinoOptions = window.__OPTIONS__;\n\n    const rulesLicense = casinoOptions?.license_rules?.license ?? 'empty';\n    const isNeedRemovePurchasesRtp = rulesLicense === 'greek';\n    const isNeedRemovePurchasesRtpForNetherlands = rulesLicense === 'netherlands';\n    const isNeedRemovePurchasesRtpForPortuguese = rulesLicense === 'portuguese';\n    const isNeedRemoveRtp = isNeedRemovePurchasesRtpForNetherlands || isNeedRemovePurchasesRtpForPortuguese;\n\n    const rtp = getFinalRtpValues(casinoOptions, isNeedRemovePurchasesRtp);\n    removeBonusRtpFromRules(rtp, isNeedRemovePurchasesRtp);\n    removeAllBonusRtpExeptChance(rtp, isNeedRemoveRtp);\n}\n\nreplaceContent();\n\n})()\n"]}