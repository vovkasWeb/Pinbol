{"content":"<div id=\"rules\">\n<h1 id=\"section\">プリンコルール</h1>\n\n<h2 id=\"section-1\">はじめに</h2>\n\n<p>20世紀のテレビ番組が発祥とされるPlinkoは、ピラミッド型をした盤面の上部から、パチンコ玉のようなボールをなるべく高倍率のゴール穴目指して落としていくゲームです。  BGamingからピラミッド型のボードのご紹介です！ 並びでは、ラインの数または各ラインのピンの数を選択することができ、8から16まで1列単位で選択できます。選択後はパチンコでいう釘のようなもので、ボールが落下するのを楽しむだけで、どの倍率の穴に落ちるかは完全に運任せ、 ボールをただひたすら倍率が書かれたゴールめがけて落としていき、配当金を増やしていくゲームです。 一緒にプリンコで運試しをしてみましょう！</p>\n\n<h2 id=\"section-2\">ルール</h2>\n\n<p>ボードの下部にある最大マネースロットにPlinko ボールを落として賞金を獲得しましょう。</p>\n\n<h2 id=\"section-3\">ベット</h2>\n\n<p>ベット額を選んでください。  <strong>”-“</strong>, <strong>”+”</strong>, <strong>“Min”</strong>, <strong>“Max”</strong> を使用できます。 最大金額に達すると、 <strong>”+”</strong> と <strong>“Max”</strong> ボタンは無効になります。 最低金額に達すると、 <strong>”+”</strong> と <strong>“Min”</strong> ボタンは無効になります。 低、ノーマル、高の中からリスクレベルを選んでください。 8から16までのライン数を選択してください。 マニュアルか自動の中からベットモードを選んでください。</p>\n\n<p><strong>Play</strong> ボタンを押すとゲームが開始します。 <strong>Bet Mode</strong> を除く全てのベットボタンはラウンド中は無効になります。 ラウンド中は、 <strong>Play</strong> ボタンを押して同じ設定で別のラウンドを開始できます。 At the end of each round the ball reaches the pocket. The numbers displayed in each pocket represent multiplier values. The multiplier of the pocket, where the ball landed, is applied to the player’s bet. The final payout is calculated by multiplying the player’s bet by all the applicable multiplier values.</p>\n\n<p>In <strong>Auto Mode</strong>, the field with the number of automatic bets is shown. Choose the <strong>number of bets</strong>. Press <strong>Play</strong> button. The button <strong>Play</strong> is changing to <strong>Stop</strong> with the number of remained bets. A series of rounds can be completed if the number of rounds set  is reached, by clicking on the button <strong>Stop</strong>, if there are not enough funds on the balance.</p>\n\n<p><span class=\"min_max_bet\">The minimum bet value is {min_bet}. The maximum bet value is {max_bet}</span></p>\n\n<h2 id=\"section-4\">結果</h2>\n\n<p>The calculation of the win is made according to the paytable. The result is added to the balance field. The size of payments varies from low to high.</p>\n\n<div class=\"license-block-casual casual_custom_license\">\n\n  <h2 id=\"license-requirements\">License requirements</h2>\n\n  <p><span class=\"__OPTIONS__-license_rules-license netherlands\">\nThe Auto Mode can be unavailable in the game because of the requirements of the license that regulates the operator’s work.\n</span></p>\n\n  <p><span class=\"__OPTIONS__-license_rules-license netherlands\">\nQuick spins can be unavailable in the game because of the requirements of the license that regulates the operator’s work.\n</span></p>\n\n  <p><span class=\"casual_custom_license\"> The ability to start another round with the same settings using the ‘Play’ button during the current round may not be available in the game because of the license that regulates the operator’s work . In this case, the ‘Play’ button will remain inactive until the current round is completed and the results are displayed. Only one round can be played at a time.</span></p>\n\n</div>\n\n<h2 id=\"rtp-\">Rtp (リターン・トゥー・プレーヤー)</h2>\n\n<p>The overall theoretical Return to Player (RTP) is {RTP.min_rtp}% - {RTP.max_rtp}% depending on the player’s chosen strategy.</p>\n\n<p>誤動作が発生した場合プレイと支払いは全て無効になります！ All unfinished rounds will be terminated every 24 hours. ゲームで「収集」が必要な場合 - 「収集」は行われ、ラそのラウンドの勝利金がプレイヤー残高に加算されます。 もしゲーム中、プレイヤーからのアクションを必要とし、プレイヤーは初のベットを上げずにノーリスクでアクションを選択したと仮定して結果がカウントされます。</p>\n\n<p><span class=\"game_version\">Game Version {game_version}.</span></p>\n\n<p>The Game Rules as published on this website are in English. Translations into other languages are provided as a service in good faith. In the event of ambiguity between an English version and a translation, the English version always retains priority.</p>\n</div>\n","contentUpdateScript":"const casinoOptions = window.__OPTIONS__;\nlet customRulesStyle = '';\n\nif (casinoOptions?.math?.gamble_limit) {\n    content = content.replaceAll('{GAMBLE_LIMIT}', casinoOptions.math.gamble_limit);\n}\n\n//INFO: temporary solution for BGG-7896 & BGG-11170, but we need more flexible solution\nconst licenseDisabled = [\"empty\", \"switzerland\"];\nconst rulesLicense = casinoOptions?.license_rules?.license ?? \"empty\";\nif (licenseDisabled.includes(rulesLicense)) {\n    customRulesStyle += ` .license-block { display: none } `;\n}\n\nif (rulesLicense === \"empty\") {\n\tcustomRulesStyle += ` .license-block-casual { display: none } `;\n}\n\n// BGG-11165: Allow custom rules for any license\ncustomRulesStyle += ` .__OPTIONS__-license_rules-license { display: none } `;\ncustomRulesStyle += ` .__OPTIONS__-license_rules-license.${rulesLicense} { display: unset } `;\n\nif (casinoOptions?.ui?.show_rtp_in_rules === false) {\n    const rtpRegExp = /<h\\d[^>]*>[^>]*<\\/h\\d>[^<]*<p>[^<]*(\\{RTP.+\\}|\\d[^<]*%)[^<]*<\\/p>[^<]*/;\n\n    content = content.replace(rtpRegExp, '');\n}\n\nif (casinoOptions?.math?.rtp) {\n    if (!isNaN(casinoOptions.math.rtp)) {\n        casinoOptions.math.rtp = { main: casinoOptions.math.rtp };\n    }\n\n    content = content.replaceAll(`{RTP_VALUE}`, `{RTP.main}`);\n    Object.keys(casinoOptions.math.rtp).forEach((key) => {\n        content = content.replaceAll(`{RTP.${key}}`, casinoOptions.math.rtp[key]);\n    });\n}\n\nif (casinoOptions?.custom?.paytableFormatted) {\n    Object.keys(casinoOptions.custom.paytableFormatted).forEach((key) => {\n        content = content.replaceAll(`{PAYTABLE.${key}}`, casinoOptions.custom.paytableFormatted[key]);\n    });\n}\n\nif (casinoOptions?.custom?.wintableFormatted) {\n\tObject.keys(casinoOptions.custom.wintableFormatted).forEach((key) => {\n\t\tcontent = content.replaceAll(`{WIN.${key}}`, casinoOptions.custom.wintableFormatted[key]);\n\t});\n}\n\nif (casinoOptions?.custom?.maxWinsFormatted) {\n    casinoOptions.custom.maxWinsFormatted.forEach((winFormatted, index) => {\n        content = content.replaceAll(`{MAX_WIN.${index}}`, winFormatted);\n    });\n}\n\nif (casinoOptions?.custom?.betFormatted) {\n    content = content.replaceAll(`{BET_FORMATTED}`, casinoOptions.custom.betFormatted);\n}\n\nif (customRulesStyle !== '') {\n    content = '<style>' + customRulesStyle + '</style>' + content;\n}\n\nreturn content;\n\n","domScripts":["(()=>{\nconst casinoOptions = window.__OPTIONS__;\n\nfunction formatBet(bet, subunits, exponent = 0) {\n    const betValue = bet / subunits;\n    let ret;\n\n    if (exponent > 0) {\n        let str = betValue.toFixed(exponent).split('.');\n        if (str[0].length > 3) {\n            str[0] = str[0].replace(/(.)(?=(.{3})+$)/g, '$1 ');\n        }\n        ret = str.join('.');\n    } else {\n        ret = betValue.toFixed(0).replace(/(.)(?=(.{3})+$)/g, '$1 ');\n    }\n    return ret;\n}\n\nfunction setMinMaxBets(options) {\n    const { rules, license_rules } = options;\n    const { min_bet, max_bet, currency } = rules || {};\n    const { symbol, exponent, subunits } = currency || {};\n\n    const isNeedToRemoveMinMaxBetBlock =\n        license_rules?.license !== 'switzerland' && license_rules?.license !== 'danish' && license_rules?.license !== 'swedish';\n    document.querySelectorAll('.min_max_bet').forEach((fragment) => {\n        if (isNeedToRemoveMinMaxBetBlock || (!min_bet && !max_bet)) {\n            fragment.remove();\n        } else {\n            const currencySymbol = symbol || '';\n            const minBet = formatBet(min_bet, subunits, exponent);\n            const maxBet = formatBet(max_bet, subunits, exponent);\n            fragment.textContent = fragment.textContent.replace('{min_bet}', `${minBet} ${currencySymbol}`);\n            fragment.textContent = fragment.textContent.replace('{max_bet}', `${maxBet} ${currencySymbol}`);\n        }\n    });\n}\n\nsetMinMaxBets(casinoOptions);\n\n})()\n","(()=>{\nconst casinoOptions = window.__OPTIONS__;\nconst customLicenses = ['netherlands', 'swedish', 'italian', 'switzerland'];\n\nfunction handleCustomLicenses(options, customLicenses) {\n\tdocument.querySelectorAll('.casual_custom_license').forEach((fragment) => {\n\t\tif (!customLicenses.includes(options?.license_rules?.license)) {\n\t\t\tfragment.remove();\n\t\t}\n\t});\n}\n\nhandleCustomLicenses(casinoOptions, customLicenses);\n\n})()\n","(()=>{\nconst casinoOptions = window.__OPTIONS__;\n\nfunction handleGameVersion(options) {\n    const gameVersion = options?.version;\n\n    document.querySelectorAll('.game_version').forEach((fragment) => {\n        if (!gameVersion) {\n            fragment.remove();\n        } else {\n            fragment.textContent = fragment.textContent.replaceAll('{game_version}', `${gameVersion}`);\n        }\n    });\n}\n\nhandleGameVersion(casinoOptions);\n\n})()\n","(()=>{\nconst PURCHASE_KEYS_REGEX = /buy|chance/;\nconst NETHERLANDS_RTP_TO_RENDER = /(main|chance)/;\n\nfunction getFinalRtpValues(options, isNeedRemovePurchasesRtp) {\n    const rtp = options?.math?.rtp ?? null;\n\n    if (!rtp || !isNeedRemovePurchasesRtp) return rtp;\n\n    return Object.entries(rtp).reduce((result, [rtpName, rtpValue]) => {\n        if (!PURCHASE_KEYS_REGEX.test(rtpName)) {\n            result[rtpName] = rtpValue;\n        }\n        return result;\n    }, {});\n}\n\nfunction removeBonusRtpFromRules(rtp, isNeedRemovePurchasesRtp) {\n    document.querySelectorAll('[class*=\"rtp\"]').forEach((fragment) => {\n        const rtpName = fragment.className.replace('rtp-', '');\n        const isNeedRemoveStaticRtp = isNeedRemovePurchasesRtp && PURCHASE_KEYS_REGEX.test(rtpName);\n        const isNeedRemoveDynamicRtp = rtp && !rtp[rtpName];\n\n        if (isNeedRemoveDynamicRtp || isNeedRemoveStaticRtp) {\n            fragment.parentElement.removeChild(fragment);\n        }\n    });\n}\n\nfunction removeAllBonusRtpExeptChance(rtp, isNeedRemoveRtp) {\n    document.querySelectorAll('[class*=\"rtp\"]').forEach((fragment) => {\n        const rtpName = fragment.className.replace('rtp-', '');\n        const isNeedRemoveStaticRtp = isNeedRemoveRtp && !NETHERLANDS_RTP_TO_RENDER.test(rtpName);\n        const isNeedRemoveDynamicRtp = rtp && !rtp[rtpName];\n\n        if (isNeedRemoveDynamicRtp || isNeedRemoveStaticRtp) {\n            fragment.parentElement.removeChild(fragment);\n        }\n    });\n}\n\nfunction replaceContent() {\n    const casinoOptions = window.__OPTIONS__;\n\n    const rulesLicense = casinoOptions?.license_rules?.license ?? 'empty';\n    const isNeedRemovePurchasesRtp = rulesLicense === 'greek';\n    const isNeedRemovePurchasesRtpForNetherlands = rulesLicense === 'netherlands';\n    const isNeedRemovePurchasesRtpForPortuguese = rulesLicense === 'portuguese';\n    const isNeedRemoveRtp = isNeedRemovePurchasesRtpForNetherlands || isNeedRemovePurchasesRtpForPortuguese;\n\n    const rtp = getFinalRtpValues(casinoOptions, isNeedRemovePurchasesRtp);\n    removeBonusRtpFromRules(rtp, isNeedRemovePurchasesRtp);\n    removeAllBonusRtpExeptChance(rtp, isNeedRemoveRtp);\n}\n\nreplaceContent();\n\n})()\n"]}