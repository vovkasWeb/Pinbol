{"content":"<div id=\"rules\">\n<h1 id=\"plinko-regler\">Plinko regler</h1>\n\n<h2 id=\"introduktion\">Introduktion</h2>\n\n<p>Plinko är det märkliga chansspelet med en boll som “plinkar” ner det vertikala brädet som är fyllt med lodrät placerade piggar. Ett mycket populärt spel som visades i TV-program under 90-talet.  BGaming skapade om brädet i en pyramidform. Spelet är mycket enkelt: spelaren väljer mellan 8 till 16 rader där de hoppas att bollen kommer att falla in i ett av de valda hålen med den bästa betalningen, sedan tittar de bara på “den studsande rörelsen genom alla hinder” från toppen av pyramiden ner till brädets botten. Bollen hamnar så småningom vid bottenpinnen och vinsten avgörs. Så välkommen till Plinkos plinkande och detaljrika system, lita på din tur och låt bollen falla!</p>\n\n<h2 id=\"regler\">Regler</h2>\n\n<p>Målet är att vinna pengar genom att låta Plinko-bollen falla och vänta tills den landar i facket med högst värde längst ner på brädet.</p>\n\n<h2 id=\"satsa\">Satsa</h2>\n\n<p>Välj insatsbelopp. Knapparna <strong>”-”</strong>, <strong>”+”</strong>, <strong>”Min”</strong>, <strong>”Max”</strong> kan användas. När maxbeloppet har nåtts, så slutar knapparna <strong>“+”</strong> och <strong>“Max”</strong> att fungera. När minimibeloppet har nåtts, så slutar knapparna <strong>“-”</strong> och <strong>“Min”</strong> att fungera. Välj risknivå: Låg, Normal eller Hög. Välj antal vinstlinjer i spelet: från 8 till 16. Välj insatsläge: Manuellt eller Auto.</p>\n\n<p>För att börja spelrundan, klicka på knappen <strong>Spela</strong>. Alla insatsknappar inaktiveras när rundan sätter igång, med undantag för “Insatsläge”. Under rundan kan ytterligare en runda med samma inställningar startas genom att använda knappen <strong>Spela</strong>. Vid slutet av varje runda hamnar bollen i fickan. De siffror som visas i varje ficka representerar multiplikatorvärden. Multiplikatorn på den ficka där bollen landade appliceras på spelarens insats. Den slutliga utbetalningen beräknas genom att multiplicera spelarens insats med alla tillämpliga multiplikatorvärden.</p>\n\n<p>I <strong>Autoläge</strong> visas fältet med antalet automatiska insatser. Välj <strong>antal satsningar</strong>. Tryck på knappen <strong>Spela</strong>. Knappen <strong>Spela</strong> ändras till <strong>Stopp</strong> med antalet insatser som finns kvar. En serie med rundor kan slutföras om antalet inställda rundor uppnås, genom att klicka på knappen <strong>Stopp</strong>, om det inte finns tillräcklig med pengar på saldot.</p>\n\n<p><span class=\"min_max_bet\">Minsta insatsvärdet är {min_bet}. Högsta insatsvärde är {max_bet}</span></p>\n\n<h2 id=\"resultat\">Resultat</h2>\n\n<p>Beräkningen av vinsten görs enligt vinsttabellen. Resultatet läggs till i saldofältet. Utbetalningens storlek varierar från låg till hög.</p>\n\n<div class=\"license-block-casual casual_custom_license\">\n\n  <h2 id=\"licenskrav\">Licenskrav</h2>\n\n  <p><span class=\"__OPTIONS__-license_rules-license netherlands\">\nAutoläget kan vara otillgängligt i spelet på grund av kraven i licensen som reglerar operatörens arbete.\n</span></p>\n\n  <p><span class=\"__OPTIONS__-license_rules-license netherlands\">\nSnabbsnurr kan vara otillgängligt i spelet på grund av kraven i licensen som reglerar operatörens arbete.\n</span></p>\n\n  <p><span class=\"casual_custom_license\"> Möjligheten att starta en annan runda med samma inställningar med hjälp av knappen ‘Play’ under den aktuella omgången är eventuellt inte tillgänglig i spelet på grund av den licens som reglerar operatörens arbete. I detta fall förblir “Play”-knappen inaktiv tills den aktuella rundan är klar och resultaten visas. Endast en runda kan spelas åt gången.</span></p>\n\n</div>\n\n<h2 id=\"return-to-player\">Return to Player</h2>\n\n<p>Den totala teoretiska summa spelaren kan få (RTP) är {RTP.min_rtp}% - {RTP.max_rtp}% beroende på spelarens valda strategi.</p>\n\n<p>Fel annullerar alla spel och utbetalningar! Alla oavslutade rundor avslutas var 24:e timme. Om spelet kräver “Insamling” - kommer “Insamling” att ske och vinsten från rundan kommer att läggas till spelarens saldo. Om spelet kräver att spelaren gör något så räknas resultatet om spelaren har valt åtgärden utan risk, utan att höja den ursprungliga insatsen.</p>\n\n<p><span class=\"game_version\">Spelversion {game_version}.</span></p>\n\n<p>Spelreglerna som publiceras på denna webbplats är på engelska. Översättningar till andra språk tillhandahålls som en tjänst i god tro. Vid eventuell oklarhet mellan den engelska versionen och en översättning prioriteras alltid den engelska versionen.</p>\n</div>\n","contentUpdateScript":"const casinoOptions = window.__OPTIONS__;\nlet customRulesStyle = '';\n\nif (casinoOptions?.math?.gamble_limit) {\n    content = content.replaceAll('{GAMBLE_LIMIT}', casinoOptions.math.gamble_limit);\n}\n\n//INFO: temporary solution for BGG-7896 & BGG-11170, but we need more flexible solution\nconst licenseDisabled = [\"empty\", \"switzerland\"];\nconst rulesLicense = casinoOptions?.license_rules?.license ?? \"empty\";\nif (licenseDisabled.includes(rulesLicense)) {\n    customRulesStyle += ` .license-block { display: none } `;\n}\n\nif (rulesLicense === \"empty\") {\n\tcustomRulesStyle += ` .license-block-casual { display: none } `;\n}\n\n// BGG-11165: Allow custom rules for any license\ncustomRulesStyle += ` .__OPTIONS__-license_rules-license { display: none } `;\ncustomRulesStyle += ` .__OPTIONS__-license_rules-license.${rulesLicense} { display: unset } `;\n\nif (casinoOptions?.ui?.show_rtp_in_rules === false) {\n    const rtpRegExp = /<h\\d[^>]*>[^>]*<\\/h\\d>[^<]*<p>[^<]*(\\{RTP.+\\}|\\d[^<]*%)[^<]*<\\/p>[^<]*/;\n\n    content = content.replace(rtpRegExp, '');\n}\n\nif (casinoOptions?.math?.rtp) {\n    if (!isNaN(casinoOptions.math.rtp)) {\n        casinoOptions.math.rtp = { main: casinoOptions.math.rtp };\n    }\n\n    content = content.replaceAll(`{RTP_VALUE}`, `{RTP.main}`);\n    Object.keys(casinoOptions.math.rtp).forEach((key) => {\n        content = content.replaceAll(`{RTP.${key}}`, casinoOptions.math.rtp[key]);\n    });\n}\n\nif (casinoOptions?.custom?.paytableFormatted) {\n    Object.keys(casinoOptions.custom.paytableFormatted).forEach((key) => {\n        content = content.replaceAll(`{PAYTABLE.${key}}`, casinoOptions.custom.paytableFormatted[key]);\n    });\n}\n\nif (casinoOptions?.custom?.wintableFormatted) {\n\tObject.keys(casinoOptions.custom.wintableFormatted).forEach((key) => {\n\t\tcontent = content.replaceAll(`{WIN.${key}}`, casinoOptions.custom.wintableFormatted[key]);\n\t});\n}\n\nif (casinoOptions?.custom?.maxWinsFormatted) {\n    casinoOptions.custom.maxWinsFormatted.forEach((winFormatted, index) => {\n        content = content.replaceAll(`{MAX_WIN.${index}}`, winFormatted);\n    });\n}\n\nif (casinoOptions?.custom?.betFormatted) {\n    content = content.replaceAll(`{BET_FORMATTED}`, casinoOptions.custom.betFormatted);\n}\n\nif (customRulesStyle !== '') {\n    content = '<style>' + customRulesStyle + '</style>' + content;\n}\n\nreturn content;\n\n","domScripts":["(()=>{\nconst casinoOptions = window.__OPTIONS__;\n\nfunction formatBet(bet, subunits, exponent = 0) {\n    const betValue = bet / subunits;\n    let ret;\n\n    if (exponent > 0) {\n        let str = betValue.toFixed(exponent).split('.');\n        if (str[0].length > 3) {\n            str[0] = str[0].replace(/(.)(?=(.{3})+$)/g, '$1 ');\n        }\n        ret = str.join('.');\n    } else {\n        ret = betValue.toFixed(0).replace(/(.)(?=(.{3})+$)/g, '$1 ');\n    }\n    return ret;\n}\n\nfunction setMinMaxBets(options) {\n    const { rules, license_rules } = options;\n    const { min_bet, max_bet, currency } = rules || {};\n    const { symbol, exponent, subunits } = currency || {};\n\n    const isNeedToRemoveMinMaxBetBlock =\n        license_rules?.license !== 'switzerland' && license_rules?.license !== 'danish' && license_rules?.license !== 'swedish';\n    document.querySelectorAll('.min_max_bet').forEach((fragment) => {\n        if (isNeedToRemoveMinMaxBetBlock || (!min_bet && !max_bet)) {\n            fragment.remove();\n        } else {\n            const currencySymbol = symbol || '';\n            const minBet = formatBet(min_bet, subunits, exponent);\n            const maxBet = formatBet(max_bet, subunits, exponent);\n            fragment.textContent = fragment.textContent.replace('{min_bet}', `${minBet} ${currencySymbol}`);\n            fragment.textContent = fragment.textContent.replace('{max_bet}', `${maxBet} ${currencySymbol}`);\n        }\n    });\n}\n\nsetMinMaxBets(casinoOptions);\n\n})()\n","(()=>{\nconst casinoOptions = window.__OPTIONS__;\nconst customLicenses = ['netherlands', 'swedish', 'italian', 'switzerland'];\n\nfunction handleCustomLicenses(options, customLicenses) {\n\tdocument.querySelectorAll('.casual_custom_license').forEach((fragment) => {\n\t\tif (!customLicenses.includes(options?.license_rules?.license)) {\n\t\t\tfragment.remove();\n\t\t}\n\t});\n}\n\nhandleCustomLicenses(casinoOptions, customLicenses);\n\n})()\n","(()=>{\nconst casinoOptions = window.__OPTIONS__;\n\nfunction handleGameVersion(options) {\n    const gameVersion = options?.version;\n\n    document.querySelectorAll('.game_version').forEach((fragment) => {\n        if (!gameVersion) {\n            fragment.remove();\n        } else {\n            fragment.textContent = fragment.textContent.replaceAll('{game_version}', `${gameVersion}`);\n        }\n    });\n}\n\nhandleGameVersion(casinoOptions);\n\n})()\n","(()=>{\nconst PURCHASE_KEYS_REGEX = /buy|chance/;\nconst NETHERLANDS_RTP_TO_RENDER = /(main|chance)/;\n\nfunction getFinalRtpValues(options, isNeedRemovePurchasesRtp) {\n    const rtp = options?.math?.rtp ?? null;\n\n    if (!rtp || !isNeedRemovePurchasesRtp) return rtp;\n\n    return Object.entries(rtp).reduce((result, [rtpName, rtpValue]) => {\n        if (!PURCHASE_KEYS_REGEX.test(rtpName)) {\n            result[rtpName] = rtpValue;\n        }\n        return result;\n    }, {});\n}\n\nfunction removeBonusRtpFromRules(rtp, isNeedRemovePurchasesRtp) {\n    document.querySelectorAll('[class*=\"rtp\"]').forEach((fragment) => {\n        const rtpName = fragment.className.replace('rtp-', '');\n        const isNeedRemoveStaticRtp = isNeedRemovePurchasesRtp && PURCHASE_KEYS_REGEX.test(rtpName);\n        const isNeedRemoveDynamicRtp = rtp && !rtp[rtpName];\n\n        if (isNeedRemoveDynamicRtp || isNeedRemoveStaticRtp) {\n            fragment.parentElement.removeChild(fragment);\n        }\n    });\n}\n\nfunction removeAllBonusRtpExeptChance(rtp, isNeedRemoveRtp) {\n    document.querySelectorAll('[class*=\"rtp\"]').forEach((fragment) => {\n        const rtpName = fragment.className.replace('rtp-', '');\n        const isNeedRemoveStaticRtp = isNeedRemoveRtp && !NETHERLANDS_RTP_TO_RENDER.test(rtpName);\n        const isNeedRemoveDynamicRtp = rtp && !rtp[rtpName];\n\n        if (isNeedRemoveDynamicRtp || isNeedRemoveStaticRtp) {\n            fragment.parentElement.removeChild(fragment);\n        }\n    });\n}\n\nfunction replaceContent() {\n    const casinoOptions = window.__OPTIONS__;\n\n    const rulesLicense = casinoOptions?.license_rules?.license ?? 'empty';\n    const isNeedRemovePurchasesRtp = rulesLicense === 'greek';\n    const isNeedRemovePurchasesRtpForNetherlands = rulesLicense === 'netherlands';\n    const isNeedRemovePurchasesRtpForPortuguese = rulesLicense === 'portuguese';\n    const isNeedRemoveRtp = isNeedRemovePurchasesRtpForNetherlands || isNeedRemovePurchasesRtpForPortuguese;\n\n    const rtp = getFinalRtpValues(casinoOptions, isNeedRemovePurchasesRtp);\n    removeBonusRtpFromRules(rtp, isNeedRemovePurchasesRtp);\n    removeAllBonusRtpExeptChance(rtp, isNeedRemoveRtp);\n}\n\nreplaceContent();\n\n})()\n"]}