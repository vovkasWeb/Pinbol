{"content":"<div id=\"rules\">\n<h1 id=\"reguli-plinko\">Reguli Plinko</h1>\n\n<h2 id=\"introducere\">Introducere</h2>\n\n<p>Plinko este jocul de noroc specific care se joacă cu o bilă care cade liber în jos pe un panou vertical populat cu ace. Este un joc extrem de popular care a apărut frecvent în emisiunile -concurs televizate ale secolului XX.  BGaming a creat panoul în formă de piramidă. Jocul este cât se poate de simplu: jucătorul alege între 8 și 16 linii, sperând că bila va cădea într-una din găurile alese cu cea mai mare valoare de plată, după care tot ce are de făcut este să urmărească „traiectoria de cădere printre obstacole” a bilei, din vârful piramidei până la baza panoului. Într-un final, bila ajunge la acul de la baza panoului și va determina câștigul. Bine ați venit deci în sistemul încurcat de complex al Plinko! Aveți încredere în norocul dvs. și lăsați bila să cadă!</p>\n\n<h2 id=\"reguli\">Reguli</h2>\n\n<p>Obiectivul este să câștigați bani prin lăsarea bilei Plinko să cadă și așteptarea momentului când aceasta aterizează în gaura cu cea mai mare valoare de la baza panoului.</p>\n\n<h2 id=\"pariere\">Pariere</h2>\n\n<p>Alegeți suma pariată. Se pot folosi butoanele <strong>“-”</strong>, <strong>“+”</strong>, <strong>“Min”</strong> și <strong>“Max”</strong>. La atingerea valorii maxime, butoanele <strong>“+”</strong> și <strong>“Max”</strong> se dezactivează. La atingerea valorii minime, butoanele <strong>“-”</strong> și <strong>“Min”</strong> se dezactivează. Alegeți nivelul de risc: scăzut, normal sau ridicat. Alegeți numărul de linii de joc: între 8 și 16. Alegeți modul de pariere: manual sau automat.</p>\n\n<p>Pentru a porni runda de joc apăsați butonul <strong>Pornire</strong>. În timpul rundei toate butoanele de pariere devin inactive, exceptând butonul <strong>Mod de pariere</strong>. În timpul rundei se poate iniția o altă rundă cu setări similare cu butonul <strong>Pornire</strong>. La finalul rundei bila ajunge în buzunar. Numerele afișate în fiecare buzunar reprezintă valorile de multiplicare. Multiplicatorul buzunarului în care a aterizat bila se aplică la miza jucătorului. Câștigul final este calculat prin înmulțirea mizei jucătorului cu toate valorile de multiplicare aplicabile.</p>\n\n<p>În <strong>Mod automat</strong> se va afișa numărul pariurilor automate. Alegeți <strong>numărul de pariuri</strong>. Apăsați butonul <strong>Pornire</strong>. Butonul <strong>Pornire</strong> se va schimba în <strong>Stop</strong> și va arăta numărul de pariuri rămase. Seria de runde se va finaliza la atingerea numărului de runde setate, prin apăsarea butonului <strong>Stop</strong>, sau dacă nu mai sunt fonduri suficiente pentru a plasa pariul.</p>\n\n<p><span class=\"min_max_bet\">Miza minimă este de {min_bet}. Miza maximă este de {max_bet}</span></p>\n\n<h2 id=\"rezultate\">Rezultate</h2>\n\n<p>Câștigul se calculează în baza tabelului de plăți. Rezultatul se adaugă la balanță. Mărimea plăților poate varia între sumă mică și mare.</p>\n\n<div class=\"license-block-casual casual_custom_license\">\n\n  <h2 id=\"cerine-de-licen\">Cerințe de licență</h2>\n\n  <p><span class=\"__OPTIONS__-license_rules-license netherlands\">\nExistă posibilitatea ca modul automat să nu fie disponibil în joc din cauza cerințelor de licență aplicabile operatorului.\n</span></p>\n\n  <p><span class=\"__OPTIONS__-license_rules-license netherlands\">\nExistă posibilitatea ca modul de joc rapid să nu fie disponibil în joc din cauza cerințelor de licență aplicabile operatorului.\n</span></p>\n\n  <p><span class=\"casual_custom_license\"> Posibilitatea de a începe o altă rundă cu aceleași setări folosind butonul „Pornire” în timpul rundei curente poate să nu fie disponibilă în joc din cauza licenței care reglementează activitatea operatorului. În acest caz, butonul „Pornire” va rămâne inactiv până la finalizarea rundei curente și afișarea rezultatelor. Se poate juca o singură rundă în același timp.</span></p>\n\n</div>\n\n<h2 id=\"rata-de-plat\">Rata de plată</h2>\n\n<p>Rata generală teoretică de plată (RTP) se situează între {RTP.min_rtp}% și {RTP.max_rtp}%, în funcție de strategia aleasă de jucător.</p>\n\n<p>Defecțiunile anulează toate jocurile și plățile! Toate rundele neterminate se vor finaliza la fiecare 24 de ore. Dacă jocul necesită „Colectare“, „Colectarea“ se va realiza și câștigul aferent rundei se va adăuga soldului jucătorului. Dacă jocul necesită o acțiune din partea jucătorului, rezultatul se va calcula cu presupunerea, că jucătorul a ales acțiunea fără riscuri, fără să ridice miza inițială.</p>\n\n<p><span class=\"game_version\">Versiune joc {game_version}.</span></p>\n\n<p>Regulile jocului publicate pe pagina web sunt în limba engleză. Traducerile în alte limbi sunt oferite doar ca un serviciu de bună credință. În cazul oricăror ambiguități între versiunea în limba engleză și traducere, versiunea în limba engleză va avea totdeauna prioritate.</p>\n</div>\n","contentUpdateScript":"const casinoOptions = window.__OPTIONS__;\nlet customRulesStyle = '';\n\nif (casinoOptions?.math?.gamble_limit) {\n    content = content.replaceAll('{GAMBLE_LIMIT}', casinoOptions.math.gamble_limit);\n}\n\n//INFO: temporary solution for BGG-7896 & BGG-11170, but we need more flexible solution\nconst licenseDisabled = [\"empty\", \"switzerland\"];\nconst rulesLicense = casinoOptions?.license_rules?.license ?? \"empty\";\nif (licenseDisabled.includes(rulesLicense)) {\n    customRulesStyle += ` .license-block { display: none } `;\n}\n\nif (rulesLicense === \"empty\") {\n\tcustomRulesStyle += ` .license-block-casual { display: none } `;\n}\n\n// BGG-11165: Allow custom rules for any license\ncustomRulesStyle += ` .__OPTIONS__-license_rules-license { display: none } `;\ncustomRulesStyle += ` .__OPTIONS__-license_rules-license.${rulesLicense} { display: unset } `;\n\nif (casinoOptions?.ui?.show_rtp_in_rules === false) {\n    const rtpRegExp = /<h\\d[^>]*>[^>]*<\\/h\\d>[^<]*<p>[^<]*(\\{RTP.+\\}|\\d[^<]*%)[^<]*<\\/p>[^<]*/;\n\n    content = content.replace(rtpRegExp, '');\n}\n\nif (casinoOptions?.math?.rtp) {\n    if (!isNaN(casinoOptions.math.rtp)) {\n        casinoOptions.math.rtp = { main: casinoOptions.math.rtp };\n    }\n\n    content = content.replaceAll(`{RTP_VALUE}`, `{RTP.main}`);\n    Object.keys(casinoOptions.math.rtp).forEach((key) => {\n        content = content.replaceAll(`{RTP.${key}}`, casinoOptions.math.rtp[key]);\n    });\n}\n\nif (casinoOptions?.custom?.paytableFormatted) {\n    Object.keys(casinoOptions.custom.paytableFormatted).forEach((key) => {\n        content = content.replaceAll(`{PAYTABLE.${key}}`, casinoOptions.custom.paytableFormatted[key]);\n    });\n}\n\nif (casinoOptions?.custom?.wintableFormatted) {\n\tObject.keys(casinoOptions.custom.wintableFormatted).forEach((key) => {\n\t\tcontent = content.replaceAll(`{WIN.${key}}`, casinoOptions.custom.wintableFormatted[key]);\n\t});\n}\n\nif (casinoOptions?.custom?.maxWinsFormatted) {\n    casinoOptions.custom.maxWinsFormatted.forEach((winFormatted, index) => {\n        content = content.replaceAll(`{MAX_WIN.${index}}`, winFormatted);\n    });\n}\n\nif (casinoOptions?.custom?.betFormatted) {\n    content = content.replaceAll(`{BET_FORMATTED}`, casinoOptions.custom.betFormatted);\n}\n\nif (customRulesStyle !== '') {\n    content = '<style>' + customRulesStyle + '</style>' + content;\n}\n\nreturn content;\n\n","domScripts":["(()=>{\nconst casinoOptions = window.__OPTIONS__;\n\nfunction formatBet(bet, subunits, exponent = 0) {\n    const betValue = bet / subunits;\n    let ret;\n\n    if (exponent > 0) {\n        let str = betValue.toFixed(exponent).split('.');\n        if (str[0].length > 3) {\n            str[0] = str[0].replace(/(.)(?=(.{3})+$)/g, '$1 ');\n        }\n        ret = str.join('.');\n    } else {\n        ret = betValue.toFixed(0).replace(/(.)(?=(.{3})+$)/g, '$1 ');\n    }\n    return ret;\n}\n\nfunction setMinMaxBets(options) {\n    const { rules, license_rules } = options;\n    const { min_bet, max_bet, currency } = rules || {};\n    const { symbol, exponent, subunits } = currency || {};\n\n    const isNeedToRemoveMinMaxBetBlock =\n        license_rules?.license !== 'switzerland' && license_rules?.license !== 'danish' && license_rules?.license !== 'swedish';\n    document.querySelectorAll('.min_max_bet').forEach((fragment) => {\n        if (isNeedToRemoveMinMaxBetBlock || (!min_bet && !max_bet)) {\n            fragment.remove();\n        } else {\n            const currencySymbol = symbol || '';\n            const minBet = formatBet(min_bet, subunits, exponent);\n            const maxBet = formatBet(max_bet, subunits, exponent);\n            fragment.textContent = fragment.textContent.replace('{min_bet}', `${minBet} ${currencySymbol}`);\n            fragment.textContent = fragment.textContent.replace('{max_bet}', `${maxBet} ${currencySymbol}`);\n        }\n    });\n}\n\nsetMinMaxBets(casinoOptions);\n\n})()\n","(()=>{\nconst casinoOptions = window.__OPTIONS__;\nconst customLicenses = ['netherlands', 'swedish', 'italian', 'switzerland'];\n\nfunction handleCustomLicenses(options, customLicenses) {\n\tdocument.querySelectorAll('.casual_custom_license').forEach((fragment) => {\n\t\tif (!customLicenses.includes(options?.license_rules?.license)) {\n\t\t\tfragment.remove();\n\t\t}\n\t});\n}\n\nhandleCustomLicenses(casinoOptions, customLicenses);\n\n})()\n","(()=>{\nconst casinoOptions = window.__OPTIONS__;\n\nfunction handleGameVersion(options) {\n    const gameVersion = options?.version;\n\n    document.querySelectorAll('.game_version').forEach((fragment) => {\n        if (!gameVersion) {\n            fragment.remove();\n        } else {\n            fragment.textContent = fragment.textContent.replaceAll('{game_version}', `${gameVersion}`);\n        }\n    });\n}\n\nhandleGameVersion(casinoOptions);\n\n})()\n","(()=>{\nconst PURCHASE_KEYS_REGEX = /buy|chance/;\nconst NETHERLANDS_RTP_TO_RENDER = /(main|chance)/;\n\nfunction getFinalRtpValues(options, isNeedRemovePurchasesRtp) {\n    const rtp = options?.math?.rtp ?? null;\n\n    if (!rtp || !isNeedRemovePurchasesRtp) return rtp;\n\n    return Object.entries(rtp).reduce((result, [rtpName, rtpValue]) => {\n        if (!PURCHASE_KEYS_REGEX.test(rtpName)) {\n            result[rtpName] = rtpValue;\n        }\n        return result;\n    }, {});\n}\n\nfunction removeBonusRtpFromRules(rtp, isNeedRemovePurchasesRtp) {\n    document.querySelectorAll('[class*=\"rtp\"]').forEach((fragment) => {\n        const rtpName = fragment.className.replace('rtp-', '');\n        const isNeedRemoveStaticRtp = isNeedRemovePurchasesRtp && PURCHASE_KEYS_REGEX.test(rtpName);\n        const isNeedRemoveDynamicRtp = rtp && !rtp[rtpName];\n\n        if (isNeedRemoveDynamicRtp || isNeedRemoveStaticRtp) {\n            fragment.parentElement.removeChild(fragment);\n        }\n    });\n}\n\nfunction removeAllBonusRtpExeptChance(rtp, isNeedRemoveRtp) {\n    document.querySelectorAll('[class*=\"rtp\"]').forEach((fragment) => {\n        const rtpName = fragment.className.replace('rtp-', '');\n        const isNeedRemoveStaticRtp = isNeedRemoveRtp && !NETHERLANDS_RTP_TO_RENDER.test(rtpName);\n        const isNeedRemoveDynamicRtp = rtp && !rtp[rtpName];\n\n        if (isNeedRemoveDynamicRtp || isNeedRemoveStaticRtp) {\n            fragment.parentElement.removeChild(fragment);\n        }\n    });\n}\n\nfunction replaceContent() {\n    const casinoOptions = window.__OPTIONS__;\n\n    const rulesLicense = casinoOptions?.license_rules?.license ?? 'empty';\n    const isNeedRemovePurchasesRtp = rulesLicense === 'greek';\n    const isNeedRemovePurchasesRtpForNetherlands = rulesLicense === 'netherlands';\n    const isNeedRemovePurchasesRtpForPortuguese = rulesLicense === 'portuguese';\n    const isNeedRemoveRtp = isNeedRemovePurchasesRtpForNetherlands || isNeedRemovePurchasesRtpForPortuguese;\n\n    const rtp = getFinalRtpValues(casinoOptions, isNeedRemovePurchasesRtp);\n    removeBonusRtpFromRules(rtp, isNeedRemovePurchasesRtp);\n    removeAllBonusRtpExeptChance(rtp, isNeedRemoveRtp);\n}\n\nreplaceContent();\n\n})()\n"]}